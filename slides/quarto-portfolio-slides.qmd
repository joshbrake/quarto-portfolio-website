---
title: Why You Need a Portfolio Website
subtitle: And how to make one
author: Prof. Josh Brake
date: November 11, 2024
format:
  revealjs:
    width: 1050
    height: 700
    theme: [default,  css/custom.scss]
    slide-number: true
output-file: index.html

---

## You need to maximize your luck surface area

![A mathematical illustration of luck surface area.](images/doing-vs-sharing.png)

Modified from "[Let It Rip](https://joshbrake.substack.com/p/let-it-rip)".


## A portfolio offers you an outlet to share your work 

A portfolio has many benefits:

::: {.incremental}
- The best credential (look what I've done)
- A demonstration of growth
- A place for others to find you
:::

## Components of Your Portfolio Website

At minimum, your portfolio website should have:

::: {.incremental}
- Home/About Me page
- Links to other profiles on the web (e.g., LinkedIn)
- A copy to a PDF of your resume
- A page with a list of your projects
:::

::: {.fragment}
You could also consider including some other things:

- Blog
- Page with hobbies
:::

## Where to start

- Brief biographical blurb
  - Who are you?
  - Where did you come from?
  - What is your personal mission (what you do now) and vision (who you want to become)?

::: {.fragment}
- Projects
  - List of projects you've worked on
  - A short description of the project
  - Photos/videos
:::

## How to make your website

There are many different options you could use to create your portfolio website.

::::: {.columns}
::: {.column width=33%}
[![](images/image-4.png)](https://developer.mozilla.org/en-US/docs/Web/HTML)
:::
::: {.column width=33%}
[![](images/image-3.png)](https://jekyllrb.com/)
:::
::: {.column width=33%}
[![](images/image-2.png)](https://quarto.org/)
:::
:::::


- Paid vs. Free
- Fancy vs. Fragile

## Quarto

::::: {.columns}
::: {.column}
- What is Quarto?
- Why should you use Quarto?
- How do you get started with Quarto?
:::
::: {.column}
[![](images/image-2.png)](https://quarto.org/)
:::
:::::


## Setup

- Download [Quarto](https://quarto.org/)
- Set up Github
- Getting your github.io site setup

## The Structure of a Quarto Site

::::: {.columns}
::: {.column}
- `_quarto.yml`
- `index.qmd`
- Other pages and folders
:::
::: {.column}

```yaml
project:
  type: website

website:
  title: "Quarto Portfolio Website"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - href: projects/
        text: Projects
      - href: blog.qmd
        text: Blog

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
```
:::
:::::


## The Quarto Development Flow

1. Write code
2. Preview
3. Revise
4. Render
5. Publish

# Building Your Site

## Steps to build your portfolio

1. Create a new quarto project
2. Configure `_quarto.yml`
3. Create structure
4. Add files and write pages
5. Render locally
6. Commit to version control (Git)
7. Publish to Github Pages

## Create new quarto project

- Create a new folder `<github_username>.github.io`.
- Open VS Code, open that new folder you created, and open a new terminal (`Terminal > New Terminal`).
- Run `quarto create`.
- Follow the prompts to select the options as shown below. Note that `./` will create the project in your current directory.

```bash
(base) joshbrake@computer % quarto create
? Create › project
? Type › website
? Directory › ./
? Title (./) › Demo
Creating project at /Users/joshbrake/dev/temp/:
  - Created _quarto.yml
  - Created index.qmd
  - Created about.qmd
  - Created styles.css
```

## Render your new site

Once you create your Quarto project you can preview it immediately to see what it looks like.

```bash
quarto preview
```

By default, this will render the entire site and then open a browser to preview it.
If you want to preview a specific file, you can include it after the command. (e.g. `quarto preview <filename>.qmd`)

## Customizing your site

Next, we'll customize the site.

- Modify file structure to add pages
- Modify `_quarto.yml`

## Modifying the file structure



::::: {.columns}
::: {.column}

::: {.r-fit-text}
You can organize your files however you would like, but choosing a regular file structure will be very helpful.
I recommend the following general structure.

- `.gitignore` file: Includes the files to leave untracked in version control.
- `blog.qmd`: will load blog post from `posts/` folder
- `_site/`: auto-generated by Quarto, you don't need to create this folder. You should add it to your `.gitignore`.
- `projects/`: folder to organize projects.
- `projects/index.qmd`: page to display and list projects.
- `images/`: folder(s) to store images for your site and pages. Best to keep organized in the relevant folder (e.g., per project).
:::

:::
::: {.column}

**Sample project directory structure**

```bash
├── .gitignore
├── README.md
├── _quarto.yml
├── _site
│   └── ...
├── blog.qmd
├── images
│   └── headshot.jpeg
├── index.qmd
├── posts
│   └── first-post.qmd
├── projects
│   ├── example-project-1
│   │   ├── images
│   │   │   └── e155-kit.jpeg
│   │   └── index.qmd
│   ├── example-project-2
│   │   ├── images
│   │   └── index.qmd
│   ├── index.qmd
│   └── template
│       ├── images
│       └── index.qmd
```
:::
:::::

## Creating your homepage

::::: {.columns}
::: {.column}
- Open `index.qmd` at the project root. This is your homepage.
- Create the following frontmatter structure, replacing the information with yours.
- Write a brief biographical blurb for yourself (you can easily change this later).
- Run `quarto preview` to check your updates.
:::
::: {.column}
```yaml
---
title: "Josh Brake"
image: images/headshot.jpeg # replace with the link to your headshot
about:
  template: jolla # see additional templates here https://quarto.org/docs/websites/website-about.html
  links:  # add links to your various social profiles
    - icon: substack
      text: Substack
      href: https://joshbrake.substack.com
    - icon: linkedin
      text: LinkedIn
      href: https://www.linkedin.com/in/jbrake
    - icon: github
      text: Github
      href: https://github.com/joshbrake
---

Enter your biography blurb here.
```
:::
:::::

## Add a project page

::::: {.columns}
::: {.column}
Next let's add a project page.

Create a new subfolder under your `projects/` folder.
Name it a descriptive name for one of your projects (e.g., `E80-robot/`). Try to avoid spaces.
Create two additional items within the folder:

- `images/`: this will hold the images for your project.
- `index.qmd`: this will be the project page.

After you finish, your directory structure should look like what's on the right.
:::
::: {.column}
```bash
.
├── projects
│   ├──E80-robot
│   │  ├── images/
│   │  └── index.qmd
```
:::
:::::

## Writing a Page

All documents in Quarto are written as [Markdown](https://www.markdownguide.org/).
It's an easy format for writing text.
Here are a few specific formatting tips to keep in mind.

- HTML Heading levels `# -> <h1>`,  `## -> <h2>`, `### -> <h3>`, 
- Images `![alt text](link)`
- Figures `::: {#fig-}`
- References
  - Figures
  - Headings
- Code blocks

## Creating a page for your project

Open the `index.qmd` page you just created inside your `E80-robot` folder and add the following.

Feel free to customize the headings as you like.

```markdown
---
title: E80 Robot
author: Josh Brake
date: 2024-11-11
image: images/ # A url to image here.
description: This is a description # Short description of the project to be shown on overview page.
---

## Problem Statement

## Project Goals and Objectives

## Process and Approach

## Results

## Impact and Reflection

## Future Improvements

```

## Adding text and images to your project page

Now we'll add some text and images to our project page.
First, copy a photo into the `images/` subfolder.
Then, edit the `index.qmd` page inside your project folder to display it.

::::: {.columns}
::: {.column}
```markdown
...

## Problem Statement

::: {#fig-replace-with-label}
![Alt text here](images/dana-point.jpeg)

Optional figure text here
:::

@fig-replace-with-label shows an image of the dock at Dana Point.

...
```
:::
::: {.column}
![](images/image-5.png){width=300px}
:::
:::::

See [Quarto docs on figures](https://quarto.org/docs/authoring/figures.html) for more information.

::: {.fragment}
**Bonus tip:** You can style inline with css by putting the css in curly braces after the image link. For example, to change the width to 400 pixels:

`![](images/dana-point.jpeg){width=400px}`.

:::


## Creating projects overview page

The last thing we need to do before we publish our site with the minimal setup is create a project overview page. To do this, open `projects/index.qmd` and add the following text.

```
---
title: Projects
---

## E80 Robot

::::: {.columns}
::: {.column}
E80: Experimental Engineering is a sophomore engineering class at Harvey Mudd College.
Check out the robot I built by following the link [here](E80-robot/).
:::
::: {.column}
![](E80-robot/images/)
:::
:::::

## Project #2
```

## Customizing `_quarto.yml`
::::: {.columns}
::: {.column}
After you add the pages
:::
::: {.column}
```yaml
project:
  type: website

website:
  title: "Quarto Portfolio Website"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - href: projects/
        text: Projects
      - href: blog.qmd
        text: Blog

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
```
:::
:::::

## Quarto Publish

Once you have your site ready and it's rendering properly locally, it's time to publish it to the web.
To do this, we'll use the `quarto publish` command.
Details can be found [here](https://quarto.org/docs/publishing/github-pages.html#publish-command).

First we need to commit all of our changes to the Git repository.
To do this, open Github Desktop, add all the files for your website, and then commit them.
Once you do this, push to the remote.

## Setting up Github pages

Then, we need to setup the Github repo to render the site from the `gh_pages` branch.

If it's a fresh directory, you won't have a `gh_pages` branch.
So, first we need to create an empty one.
To do so, run the following code:

```bash
git checkout --orphan gh-pages
git reset --hard # make sure all changes are committed before running this!
git commit --allow-empty -m "Initialising gh-pages branch"
git push origin gh-pages
```

After you finish this, go back to the main branch by running `git checkout main`.
This must be completed **before** you run `quarto publish`!

## Publishing

Once you've completed these steps, login to your Github repository and configure Github Pages to render the site from the `gh_pages` branch.

![](images/image-6.png)

# Taking Your Portfolio to the Next Level

## Buy Your Own Domain Name

A personal domain is well worth your investment.
It will cost you at least $20-40 a year, but it will give you a nice spot for your web presence and also a nice email.

- Go with a .com if it's available. (could also consider .me as well)

## Hosting

The domain name just gives you a DNS entry but you also need a server with an IP to point that DNS entry to.
A few options:

- Host on Github pages and direct your domain there.
- Self host
- Host with a conventional web hosting company
- Host on a VPS

## Some other tools

VS Code tools

- Markdown extension: Can help you easily paste in images, automatically update filenames when you change them.
- Snippets: pieces of code that template commonly used code constructs.


## Conclusion

![A mathematical illustration of luck surface area.](images/doing-vs-sharing.png)

Modified from "[Let It Rip](https://joshbrake.substack.com/p/let-it-rip)".

